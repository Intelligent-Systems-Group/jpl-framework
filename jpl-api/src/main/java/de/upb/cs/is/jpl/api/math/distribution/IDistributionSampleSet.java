package de.upb.cs.is.jpl.api.math.distribution;


import de.upb.cs.is.jpl.api.math.distribution.numerical.integer.IIntegerDistribution;


/**
 * This interface represents a sample set of an {@link IDistribution}, that is, a set of samples
 * generated by this distribution.
 * 
 * Generally all {@link IDistributionSampleSet} implementations are assumed to be indexed in such a
 * way that one can obtain a sample at a specific index. Furthermore they should support adding
 * samples.
 * 
 * @author Alexander Hetzer
 *
 * @param <SPACE> the space (domain) of the distribution whose samples should be contained inside
 *           this sample set, e.g. Integer for {@link IIntegerDistribution}s
 */
public interface IDistributionSampleSet<SPACE> {

   /**
    * Adds the given sample to this sample set.
    * 
    * @param sample the sample to be added to this sample set
    * @throws NullPointerException if the given sample is {@code null}
    */
   public void addSample(SPACE sample);


   /**
    * Adds the given sample to this sample set at the given index. If there is already another
    * sample at this index, this sample and all samples at subsequent indices will be shifted one to
    * the right, i.e. their index will be increased by one.
    * 
    * @param sample the sample to be added to this sample set
    * @param index the index at which the sample should be added
    * @throws IndexOutOfBoundsException if the given index is either below {@code 0}
    * @throws NullPointerException if the given sample is {@code null}
    */
   public void addSampleAtIndex(SPACE sample, int index);


   /**
    * Returns the sample at the given index in this sample set.
    * 
    * @param index the index of the sample to be returned
    * @return the sample at the given index in this sample set
    * @throws IndexOutOfBoundsException if the given index is below 0 or above the sample size
    */
   public SPACE getSample(int index);


   /**
    * Returns the size of this sample set, i.e. the number of samples contained.
    * 
    * @return the size of this sample set
    */
   public int getSize();

}
